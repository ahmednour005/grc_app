<?php

namespace App\Http\Controllers\admin\vulnerability_management;

use App\Events\VulnerabilityCreated;
use App\Events\VulnerabilityDeleted;
use App\Events\VulnerabilityUpdated;
use App\Exports\VulnerabilitiesExport;
use App\Http\Controllers\Controller;
use App\Imports\VulnerabilitiesImport;
use App\Models\Action;
use App\Models\Asset;
use App\Models\Department;
use App\Models\Team;
use App\Models\TeamVulnerability;
use App\Models\User;
use App\Models\Vulnerability;
use Illuminate\Validation\Rule;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Support\Str;



class VulnerabilityManagementController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $users = User::select('id', 'name')->get();
        $assets = Asset::select('id', 'name')->get();
        $teams = Team::select('id', 'name')->get();

        $breadcrumbs = [['link' => route('admin.dashboard'), 'name' => __('locale.Dashboard')], ['name' => __('locale.VulnerabilityManagement')]];

        return view('admin.content.vulnerability_management.index', compact('breadcrumbs', 'users', 'assets', 'teams'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => ['required', 'max:255'],
            'cve' => ['required', 'max:255'],
            'assets' => ['required', 'array'],
            'assets.*' => ['exists:assets,id'],
            'teams' => ['required', 'array'],
            'teams.*' => ['exists:teams,id'],
            'severity' => ['required', Rule::in(['Critical', 'High', 'Medium', 'Low', 'Informational'])],
            'description' => ['required', 'string'],
            'recommendation' => ['required', 'string'],
            'plan' => ['required', 'string'],
            'status' => ['required', Rule::in(['Open', 'In Progress', 'Closed'])],
        ]);

        // Check if there is any validation errors
        if ($validator->fails()) {
            $errors = $validator->errors()->toArray();

            $response = array(
                'status' => false,
                'errors' => $errors,
                'message' => __('vulnerability.ThereWasAProblemAddingTheVulnerability') . "<br>" . __('locale.Validation error'),
            );
            return response()->json($response, 422);
        } else {
            DB::beginTransaction();
            try {
                $vulnerability = Vulnerability::create([
                    'name' => $request->name,
                    'cve' => $request->cve,
                    'severity' => $request->severity,
                    'description' => $request->description,
                    'recommendation' => $request->recommendation,
                    'plan' => $request->plan,
                    'status' => $request->status,
                    'created_by' => auth()->id()
                ]);

                // Store vulnerability teams
                $allVulnerabilityTeams = Team::whereIn('id', $request->teams ?? [])->get();
                $vulnerability->teams()->saveMany($allVulnerabilityTeams);

                // Store vulnerability assets
                $allVulnerabilityAssets = Asset::whereIn('id', $request->assets ?? [])->get();
                $vulnerability->assets()->saveMany($allVulnerabilityAssets);

                // Audit log
                $message = __("vulnerability.A vulnerability named") . " \"" . $vulnerability->name . "\" " . __("locale.CreatedBy") . " \"" . auth()->user()->name . "\".";
                write_log($vulnerability->id, auth()->id(), $message, 'vulnerability');

                DB::commit();
                event(new VulnerabilityCreated($vulnerability));
                $response = array(
                    'status' => true,
                    'message' => __('vulnerability.VulnerabilityWasAddedSuccessfully'),
                );
                return response()->json($response, 200);
            } catch (\Throwable $th) {

                $response = array(
                    'status' => false,
                    'errors' => [],
                    // 'message' => $th->getMessage(),
                    'message' => __('locale.ThereAreUnexpectedProblems')
                );
                return response()->json($response, 502);

                $response = array(
                    'status' => false,
                    'errors' => [],
                    'message' => __('locale.Error'),
                );
                return response()->json($response, 502);
            }
        }
    }

    /**
     * Get specified resource data for editing.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function ajaxGet($id)
    {
        $vulnerability = Vulnerability::with('teams:id', 'assets:id')->find($id);
        if ($vulnerability) {
            $data = $vulnerability->toArray();
            $teams = array_map(function ($team) {
                return $team['id'];
            }, $vulnerability->teams->toArray());

            $assets = array_map(function ($team) {
                return $team['id'];
            }, $vulnerability->assets->toArray());

            $data['assets'] = $assets;
            $data['teams'] = $teams;
            $data['created_at'] = $vulnerability->created_at->format('Y-m-d H:i');


            $response = array(
                'status' => true,
                'data' => $data,
            );
            return response()->json($response, 200);
        } else {
            $response = array(
                'status' => false,
                'message' => __('locale.Error 404'),
            );
            return response()->json($response, 404);
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $vulnerability = Vulnerability::with('teams:id', 'assets:id')->find($id);
        if ($vulnerability) {
            $validator = Validator::make($request->all(), [
                'name' => ['required', 'max:255'],
                'cve' => ['required', 'max:255'],
                'assets' => ['required', 'array'],
                'assets.*' => ['exists:assets,id'],
                'teams' => ['required', 'array'],
                'teams.*' => ['exists:teams,id'],
                'severity' => ['required', Rule::in(['Critical', 'High', 'Medium', 'Low', 'Informational'])],
                'description' => ['required', 'string'],
                'recommendation' => ['required', 'string'],
                'plan' => ['required', 'string'],
                'status' => ['required', Rule::in(['Open', 'In Progress', 'Closed'])],
            ]);

            // Check if there is any validation errors
            if ($validator->fails()) {
                $errors = $validator->errors()->toArray();

                $response = array(
                    'status' => false,
                    'errors' => $errors,
                    'message' => __('vulnerability.ThereWasAProblemUpdatingTheVulnerability') . "<br>" . __('locale.Validation error'),
                );
                return response()->json($response, 422);
            } else {
                DB::beginTransaction();
                try {
                    // Update vulnerability teams
                    $currentTeams = array_map(function ($team) {
                        return $team['id'];
                    }, $vulnerability->teams->toArray());
                    $deletedTeams = array_diff($currentTeams ?? [], $request->teams ?? []);
                    $addedTeams = array_diff($request->teams ?? [], $currentTeams ?? []);

                    // Delete deleted teams
                    $vulnerability->teams()->detach($deletedTeams);

                    // Add added teams
                    $allVulnerabilityTeams = Team::whereIn('id', $addedTeams ?? [])->get();
                    $vulnerability->teams()->saveMany($allVulnerabilityTeams);

                    // Update vulnerability assets
                    $currentAssets = array_map(function ($team) {
                        return $team['id'];
                    }, $vulnerability->assets->toArray());
                    $deletedAssets = array_diff($currentAssets ?? [], $request->assets ?? []);
                    $addedAssets = array_diff($request->assets ?? [], $currentAssets ?? []);

                    // Delete deleted assets
                    $vulnerability->assets()->detach($deletedAssets);

                    // Add added assets
                    $allVulnerabilityAssets = Asset::whereIn('id', $addedAssets ?? [])->get();
                    $vulnerability->assets()->saveMany($allVulnerabilityAssets);


                    $updatedData = [
                        'name' => $request->name,
                        'cve' => $request->cve,
                        'severity' => $request->severity,
                        'description' => $request->description,
                        'recommendation' => $request->recommendation,
                        'plan' => $request->plan,
                        'status' => $request->status,
                        'created_by' => auth()->id()
                    ];

                    // Vulnerability status changed
                    if ($vulnerability->status != $request->status) {
                        $updatedData['update_status_date'] = now();
                        $updatedData['update_status_user'] = auth()->id();
                    }

                    $vulnerability->update($updatedData);

                    // Audit log
                    $message = __("vulnerability.A vulnerability named") . " \"" . $vulnerability->name . "\" " . __("locale.UpdatedBy") . " \"" . auth()->user()->name . "\".";
                    write_log($vulnerability->id, auth()->id(), $message, 'vulnerability');
                    DB::commit();
                    event(new VulnerabilityUpdated($vulnerability));
                    $response = array(
                        'status' => true,
                        'message' => __('vulnerability.VulnerabilityWasUpdatedSuccessfully'),
                    );
                    return response()->json($response, 200);
                } catch (\Throwable $th) {
                    DB::rollBack();

                    $response = array(
                        'status' => false,
                        'errors' => [],
                        // 'message' => $th->getMessage(),
                        'message' => __('locale.Error'),
                    );
                    return response()->json($response, 502);
                }
            }
        } else {
            $response = array(
                'status' => false,
                'message' => __('locale.Error 404'),
            );
            return response()->json($response, 404);
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $vulnerability = Vulnerability::find($id);
        $vulnerabilityName = $vulnerability->name;
        $vulnerabilityId = $vulnerability->id;
        $vulnerability->teams = $vulnerability->teams;
        $vulnerability->assets = $vulnerability->assets;
        if ($vulnerability) {
            DB::beginTransaction();
            try {
                $vulnerability->delete();

                // Audit log
                $message = __("vulnerability.A vulnerability named") . " \"" . $vulnerabilityName . "\" was deleted by username \"" . auth()->user()->name . "\".";
                write_log($vulnerabilityId, auth()->id(), $message, 'vulnerability');

                DB::commit();
                event(new VulnerabilityDeleted($vulnerability));
                $response = array(
                    'status' => true,
                    'message' => __('vulnerability.VulnerabilityWasDeletedSuccessfully'),
                );
                return response()->json($response, 200);
            } catch (\Throwable $th) {
                DB::rollBack();

                if ($th->errorInfo[0] == 23000) {
                    $errorMessage = __('vulnerability.ThereWasAProblemDeletingTheVulnerability') . "<br>" . __('locale.CannotDeleteRecordRelationError');
                } else {
                    $errorMessage = __('vulnerability.ThereWasAProblemDeletingTheVulnerability');
                }
                $response = array(
                    'status' => false,
                    'message' => $errorMessage,
                    // 'message' => $th->getMessage(),
                );
                return response()->json($response, 404);
            }
        } else {
            $response = array(
                'status' => false,
                'message' => __('locale.Error 404'),
            );
            return response()->json($response, 404);
        }
    }

    /**
     * Return a listing of the resource after some manipulation depending on current user 
     * if is admin all data returned 
     * else returned data will depending on vulnerability creator or current user team.
     * 
     * @param  \Illuminate\Http\Request  $request
     *
     * @return \Illuminate\Http\Response
     */
    public function ajaxGetList(Request $request)
    {
        /* Start reading datatable data and custom fields for filtering */
        $dataTableDetails = [];
        $customFilterFields = [
            'normal' => ['name', 'cve', 'severity', 'status'],
            'relationships' => ['assets', 'teams'],
            'other_global_filters' => ['created_at'],
        ];
        $relationshipsWithColumns = [
            // 'relationshipName:column1,column2,....'
            'assets:name',
            'teams:name'
        ];

        prepareDatatableRequestFields($request, $dataTableDetails, $customFilterFields);
        /* End reading datatable data and custom fields for filtering */

        $currentUser = auth()->user();
        $conditions = [];
        if (!auth()->user()->hasPermission('vulnerability_management.all')) {
            if (isDepartmentManager()) {
                $departmentId = (Department::where('manager_id', auth()->id())->first())->id;
                $departmentMembers =  User::with('teams')->where('department_id', $departmentId)->orWhere('id', auth()->id())->get();
                $departmentMembersIds =  $departmentMembers->pluck('id')->toArray();
                $departmentTeams = [];
                foreach ($departmentMembers as $departmentMember) {
                    $departmentTeams = array_merge($departmentTeams, $departmentMember->teams->pluck('id')->toArray());
                }
                $vulnerabilitiesFromTeamIds = TeamVulnerability::whereIn('team_id', $departmentTeams)->pluck('vulnerability_id')->toArray();
                $vulnerabilitiesFromCurrentUserIds = Vulnerability::whereIn('created_by', $departmentMembersIds)->pluck('id')->toArray();
            } else {
                $teamIds = $currentUser->teams()->pluck('id')->toArray();
                $vulnerabilitiesFromTeamIds = TeamVulnerability::whereIn('team_id', $teamIds)->pluck('vulnerability_id')->toArray();
                $vulnerabilitiesFromCurrentUserIds = Vulnerability::where('created_by', auth()->id())->pluck('id')->toArray();
            }
            $allVulnerabilitiesId = array_unique(array_merge(
                $vulnerabilitiesFromTeamIds,
                $vulnerabilitiesFromCurrentUserIds
            ), SORT_REGULAR);

            $conditions = [
                'whereIn' => [
                    'id' => $allVulnerabilitiesId
                ]
            ];
            unset($vulnerabilitiesFromTeamIds, $vulnerabilitiesFromCurrentUserIds, $allVulnerabilitiesId);
        }

        // Getting total records count with and without apply global search
        [$totalRecords, $totalRecordswithFilter] = getDatatableFilterTotalRecordsCount(
            Vulnerability::class,
            $dataTableDetails,
            $customFilterFields,
            $conditions
        );

        $mainTableColumns = getTableColumnsSelect(
            'vulnerabilities',
            [
                'id',
                'name',
                'cve',
                'severity',
                'status',
                'created_at'
            ]
        );

        // Getting records with apply global search */
        $vulnerabilities = getDatatableFilterRecords(
            Vulnerability::class,
            $dataTableDetails,
            $customFilterFields,
            $relationshipsWithColumns,
            $mainTableColumns,
            $conditions
        );

        // Custom vulnerabilities response data as needs
        $data_arr = [];
        foreach ($vulnerabilities as $vulnerability) {
            $data_arr[] = array(
                'id' =>  $vulnerability->id,
                'name' => $vulnerability->name,
                'cve' => $vulnerability->cve,
                'assets' => array_map(function ($element) {
                    return $element['name'];
                }, $vulnerability->teams->toArray()),
                'teams' => array_map(function ($element) {
                    return $element['name'];
                }, $vulnerability->assets->toArray()),
                'severity' => $vulnerability->severity,
                'status' => $vulnerability->status,
                'created_at' => $vulnerability->created_at->format('Y-m-d H:i'),
                'Actions' => $vulnerability->id
            );
        }

        // Get custom response for datatable ajax request
        $response = getDatatableAjaxResponse(intval($dataTableDetails['draw']), $totalRecords, $totalRecordswithFilter, $data_arr);

        return response()->json($response, 200);
    }

    /**
     * Return an Export file for listing of the resource after some manipulation.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function ajaxExport(Request $request)
    {
        if ($request->type != 'pdf')
            return Excel::download(new VulnerabilitiesExport, 'Vulnerabilities.xlsx');
        else
            return 'Vulnerabilities.pdf';
    }


    /**
     * function to send actions of module to notifications view
     *
     */
    public function notificationsSettings()
    {

        // defining the breadcrumbs that will be shown in page
        $breadcrumbs = [['link' => route('admin.dashboard'), 'name' => __('locale.Dashboard')], ['link' => route('admin.vulnerability_management.index'), 'name' => __('locale.VulnerabilityManagement')], ['name' => __('locale.NotificationsSettings')]];
        $users = User::select('id', 'name')->get();  // getting all users to list them in select input of users
        $moduleActionsIds = [1, 2, 3];   // defining ids of actions modules
        $moduleActionsIdsAutoNotify = [];  // defining ids of actions modules

        // defining variables associated with each action "for the user to choose variables he wants to add to the message of notification" "each action id will be the array key of action's variables list"
        $actionsVariables = [
            1 => ['name', 'cve', 'description', 'severity', 'recommendation', 'plan', 'status', 'teams', 'assets'],
            2 => ['name', 'cve', 'description', 'severity', 'status'],
            3 => ['name', 'teams', 'assets'],
        ];
        // defining roles associated with each action "for the user to choose roles he wants to sent the notification to" "each action id will be the array key of action's roles list"
        $actionsRoles = [
            1 => ['creator' => __('vulnerability.VulnerabilityCreator'), 'Team-teams' => __('vulnerability.TeamsOfVulnerability')],
            2 => ['creator' => __('vulnerability.VulnerabilityCreator'), 'Team-teams' => __('vulnerability.TeamsOfVulnerability')],
            // 3 => ['creator' => __('vulnerability.VulnerabilityCreator'), 'Team-teams' => __('vulnerability.TeamsOfVulnerability')],
        ];
        // getting actions with their system notifications settings, sms settings and mail settings to list them in tables
        $actionsWithSettings = Action::whereIn('actions.id', $moduleActionsIds)
            ->leftJoin('system_notifications_settings', 'actions.id', '=', 'system_notifications_settings.action_id')
            ->leftJoin('mail_settings', 'actions.id', '=', 'mail_settings.action_id')
            ->leftJoin('sms_settings', 'actions.id', '=', 'sms_settings.action_id')
            ->get([
                'actions.id as action_id',
                'actions.name as action_name',
                'system_notifications_settings.id as system_notification_setting_id',
                'system_notifications_settings.status as system_notification_setting_status',
                'mail_settings.id as mail_setting_id',
                'mail_settings.status as mail_setting_status',
                'sms_settings.id as sms_setting_id',
                'sms_settings.status as sms_setting_status',
            ]);
        $actionsWithSettingsAuto = [];
        return view('admin.notifications-settings.index', compact('breadcrumbs', 'users', 'actionsWithSettings', 'actionsVariables', 'actionsRoles', 'moduleActionsIdsAutoNotify', 'actionsWithSettingsAuto'));
    }

    // This function is used to open the import form and send the required data for it
    public function openImportForm()
    {
        // Defining breadcrumbs for the page
        $breadcrumbs = [
            ['link' => route('admin.dashboard'), 'name' => __('locale.Dashboard')],
            ['link' => route('admin.vulnerability_management.index'), 'name' => __('locale.Vulnerabilities')],
            ['name' => __('locale.Import')]
        ];

        // Defining database columns with rules and examples
        $databaseColumns = [
            // Column: 'name'
            ['name' => 'name', 'rules' => ['required', 'should be unique in vulnerabilities table'], 'example' => 'Vulnerability 1'],

            // Column: 'cve'
            ['name' => 'cve', 'rules' => ['required'], 'example' => 'cve'],

            // Column: 'assets'
            ['name' => 'assets', 'rules' => [
                'required', 'should be written as comma-separated text',
                'must exist in assets of the system. Assets not in the system will be removed'
            ], 'example' => 'Asset1, Asset2'],

            // Column: 'teams'
            ['name' => 'teams', 'rules' => [
                'required', 'should be written as comma-separated text',
                'must exist in teams of the system. Teams not in the system will be removed'
            ], 'example' => 'Team1, Team2'],

            // Column: 'severity'
            ['name' => 'severity', 'rules' => [
                'required',
                'must have value Critical or High or Medium or Low or Informational',
            ], 'example' => 'critical'],

            // Column: 'description'
            ['name' => 'description', 'rules' => ['required'], 'example' => 'Some description'],

            // Column: 'recommendation'
            ['name' => 'recommendation', 'rules' => ['required'], 'example' => 'Some recommendation'],


            // Column: 'plan'
            ['name' => 'plan', 'rules' => ['required'], 'example' => 'Some plan'],

            // Column: 'status'
            ['name' => 'status', 'rules' => [
                'required',
                'must have value Open or In Progress or Closed',
            ], 'example' => 'Open'],

        ];

        // Define the path for the import data function
        $importDataFunctionPath = route('admin.vulnerability_management.ajax.importData');

        // Return the view with necessary data
        return view('admin.import.index', compact('breadcrumbs', 'databaseColumns', 'importDataFunctionPath'));
    }


    // This function is used to validate the data coming from mapping column and then
    // sending them to "VulnerabilityImport" class to import its data
    public function importData(Request $request)
    {
        // Validate the incoming request for the 'import_file' field
        $validator = Validator::make($request->all(), [
            'import_file' => ['required', 'file', 'max:5000'],
        ]);

        // Check for validation errors
        if ($validator->fails()) {
            $errors = $validator->errors()->toArray();

            // Prepare response with validation errors
            $response = [
                'status' => false,
                'errors' => $errors,
                'message' => __('locale.ThereWasAProblemImportingTheItem', ['item' => __('locale.Vulnerabilities')])
                    . "<br>" . __('locale.Validation error'),
            ];
            return response()->json($response, 422);
        } else {
            // Start a database transaction
            DB::beginTransaction();
            try {
                // Mapping columns from the request to database columns
                $columnsMapping = array();
                $columns = ['name', 'cve', 'assets', 'teams', 'severity', 'description', 'recommendation','plan','status'];

                foreach ($columns as $column) {
                    if ($request->has($column)) {
                        $snakeCaseColumn = Str::snake($request->input($column));
                        $columnsMapping[$column] = $snakeCaseColumn;
                    }
                }

                // Extract values and filter out null values
                $values = array_values(array_filter($columnsMapping, function ($value) {
                    if ($value != null && $value != '') {
                        return $value;
                    }
                }));

                // Check for duplicate values
                if (count($values) !== count(array_unique($values))) {
                    $response = [
                        'status' => false,
                        'message' => __('locale.YouCantUseTheSameFileColumnForMoreThanOneDatabaseColumn'),
                    ];
                    return response()->json($response, 422);
                }

                // Import data using the specified columns mapping
                (new VulnerabilitiesImport($columnsMapping))->import(request()->file('import_file'));

                // Commit the transaction
                DB::commit();

                // Prepare success response
                $response = [
                    'status' => true,
                    'reload' => true,
                    'message' => __('locale.ItemWasImportedSuccessfully', ['item' => __('locale.Vulnerabilities')]),
                ];
                return response()->json($response, 200);
            } catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
                // Rollback the transaction in case of an exception
                DB::rollBack();

                // Handle validation exceptions and prepare error response
                $failures = $e->failures();
                $errors = [];
                foreach ($failures as $failure) {
                    if (!array_key_exists($failure->row(), $errors)) {
                        $errors[$failure->row()] = [];
                    }
                    $errors[$failure->row()][] = [
                        'attribute' => $failure->attribute(),
                        'value' =>  $failure->values()[$failure->attribute()] ?? '',
                        'error' => $failure->errors()[0]
                    ];
                }

                $response = [
                    'status' => false,
                    'errors' => $errors,
                    'message' => __('locale.ThereWasAProblemImportingTheItem', ['item' => __('locale.Vulnerabilities')]),
                ];
                return response()->json($response, 502);
            }
        }
    }

}
