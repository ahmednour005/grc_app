//select2 class
$(document).ready(function () {
  $('.multiple-select2').select2();
});

// function to show error validation 
function showError(data) {
  $('.error').empty();
  $.each(data, function (key, value) {
    $('.error-' + key).empty();
    $('.error-' + key).append(value);
  });
}

// status [warning, success, error]
function makeAlert($status, message, title) {
  // On load Toast
  if (title == 'Success')
    title = 'ðŸ‘‹' + title;
  toastr[$status](message, title,
    {
      closeButton: true,
      tapToDismiss: false,
    }
  );
}

// Submit form for creating asset
$('#add-new-vulnerability-management form').on('submit', function (e) {
  e.preventDefault();
  $.ajax({
    url: $(this).attr('action')
    , type: "POST"
    , data: $(this).serialize()
    , success: function (data) {
      if (data.status) {
        makeAlert('success', data.message, lang['success']);
        $('#add-new-vulnerability-management').modal('hide');
        redrawDatatable();
      } else {
        showError(data['errors']);
      }
    }
    , error: function (response, data) {
      responseData = response.responseJSON;
      makeAlert('error', responseData.message, lang['error']);
      showError(responseData.errors);
    }
  });
});

// Submit form for editing asset
$('#edit-vulnerability-management form').on('submit', function (e) {
  e.preventDefault();
  const id = $(this).find('input[name="id"]').val();
  let url = URLs['update'];
  url = url.replace(':id', id);
  $.ajax({
    url: url
    , type: "PUT"
    , data: $(this).serialize()
    , success: function (data) {
      if (data.status) {
        makeAlert('success', data.message, lang['success']);
        $('#edit-vulnerability-management form').trigger("reset");
        $('#edit-vulnerability-management').modal('hide');
        redrawDatatable();
      } else {
        showError(data['errors']);
      }
    }
    , error: function (response, data) {
      responseData = response.responseJSON;
      makeAlert('error', responseData.message, lang['error']);
      showError(responseData.errors);
    }
  });
});

function DeleteVulnerability(id) {
  let url = URLs['delete'];
  url = url.replace(':id', id);
  $.ajax({
    url: url
    , type: "DELETE"
    , headers: {
      'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    }
    , success: function (data) {
      if (data.status) {
        makeAlert('success', data.message, lang['success']);
        redrawDatatable();
      }
    }
    , error: function (response, data) {
      responseData = response.responseJSON;
      makeAlert('error', responseData.message, lang['error']);
    }
  });
}

// Show modal for editing
function ShowModalEditVulnerability(id) {
  let url = URLs['edit'];
  url = url.replace(':id', id);
  $.ajax({
    url: url
    , type: "GET"
    , headers: {
      'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    }
    , success: function (response) {
      if (response.status) {
        const editForm = $("#edit-vulnerability-management form");

        // Start Assign Vulnerability data to modal
        editForm.find('input[name="id"]').val(id);
        editForm.find("input[name='name']").val(response.data.name);
        editForm.find("input[name='cve']").val(response.data.cve);
        response.data.assets.forEach(assetId => {
          editForm.find(`select[name='assets[]'] option[value='${assetId}']`).attr(
            'selected', true).trigger('change');
        });
        response.data.teams.forEach(teamId => {
          editForm.find(`select[name='teams[]'] option[value='${teamId}']`).attr(
            'selected', true).trigger('change');
        });
        editForm.find(`select[name='severity'] option[value='${response.data.severity}']`).attr('selected', true).trigger('change');
        editForm.find("textarea[name='description']").val(response.data.description);
        editForm.find("textarea[name='recommendation']").val(response.data.recommendation);
        editForm.find("textarea[name='plan']").val(response.data.plan);
        editForm.find(`select[name='status'] option[value='${response.data.status}']`).attr('selected', true).trigger('change');
        // End Assign Vulnerability data to modal
        $('.dtr-bs-modal').modal('hide');
        $('#edit-vulnerability-management').modal('show');
      }
      // alert(1);
    }
    , error: function (response, data) {
      responseData = response.responseJSON;
      makeAlert('error', responseData.message, lang['error']);
    }
  });
}

// Show delete alert modal
function ShowModalDeleteVulnerability(id) {
  $('.dtr-bs-modal').modal('hide');
  Swal.fire({
    title: lang['confirmDeleteRecordMessage']
    , text: lang['revert']
    , icon: 'question'
    , showCancelButton: true
    , confirmButtonText: lang['confirmDelete']
    , cancelButtonText: lang['cancel']
    , customClass: {
      confirmButton: 'btn btn-relief-success ms-1'
      , cancelButton: 'btn btn-outline-danger ms-1'
    }
    , buttonsStyling: false
  }).then(function (result) {
    if (result.value) {
      DeleteVulnerability(id);
    }
  });
}

// Reset form
function resetFormData(form) {
  $('.error').empty();
  form.trigger("reset")
  form.find('input:not([name="_token"])').val('');
  form.find('select.multiple-select2 option[selected]').attr('selected', false);
  form.find('select.select2 option').attr('selected', false);
  form.find("select.select2").each(function (index) {
    $(this).find('option').first().attr('selected', true);
  });
  form.find('select').trigger('change');
}

$('.modal').on('hidden.bs.modal', function () {
  resetFormData($(this).find('form'));
})

drawDatatable(
  // columnsData
  [
    { data: 'id' },
    { data: 'name' },
    { data: 'cve' },
    { data: 'assets' },
    { data: 'teams' },
    { data: 'severity' },
    { data: 'status' },
    { data: 'created_at' },
    { data: 'Actions' }
  ],
  // columnDefinitions
  [
    {
      // Actions
      targets: -1,
      orderable: false,
      render: function (data, type, full, meta) {
        let returnedString = '';

        if (permission['delete']) {
          returnedString += '<a  href="javascript:;" onclick="ShowModalDeleteVulnerability(' + data + ')" class="item-delete">' +
            feather.icons['trash-2'].toSvg({ class: 'me-50 font-small-4' }) +
            '</a>';
        }

        if (permission['edit']) {
          returnedString += '<a  href="javascript:;" onclick="ShowModalEditVulnerability(' + data + ')" class="item-edit">' +
            feather.icons['edit'].toSvg({ class: 'font-small-4' }) +
            '</a>';
        }

        if (returnedString == '')
          returnedString = '------';

        return (
          returnedString
        );
      }
    }
    , {
      // Label for status
      targets: -3,
      render: function (data, type, full, meta) {
        return lang[data];
      }
    }
    , {
      // Label for severity
      targets: -4,
      render: function (data, type, full, meta) {
        return lang[data];
      }
    }
    , {
      // Label for teams
      targets: -5,
      render: function (data, type, full, meta) {
        returnedData = '';
        data.forEach(element => {
          returnedData += '<span class="badge rounded-pill badge-light-primary">' +
            element +
            '</span>'
        });
        return returnedData;
      }
    }
    , {
      // Label for assets
      targets: -6,
      render: function (data, type, full, meta) {
        returnedData = '';
        data.forEach(element => {
          returnedData += '<span class="badge rounded-pill badge-light-primary">' +
            element +
            '</span>'
        });
        return returnedData;
      }
    }
  ],
  // detailsOfItem
  lang['DetailsOfItem'],
  // detailsOfItemKey
  'name'
);